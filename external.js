   var base12CoursePrice =  500.00;      	var base34CoursePrice =  500.00;  	var nonResUnderAdd =  500.00;  	var credReq =  120;  	var doublePerSem  =  500.00;  	var singlePerSem =  500.00;  	var apartSinglePerSem =  500.00;  	var apartDoublePerSem =  500.00;  	  	var doubleSinglePerSem =  500.00;  	var postGradCoursePrice =  500.00;  	var nonResGradAdd =  500.00;  	var addFeePerSem =  500.00;  	var mealPlan0 = 500.00;  	var mealPlan1 =  500.00;  	var mealPlan2 =  500.00;  	var mealPlan3 =  500.00;  	var mealPlan4 =  500.00;  	var mealPlan5 =  500.00;  	var mealPlan6 =  500.00;  	var natAveInPerSem =  500.00;  	var natAveOutPerSem =  500.00;  	var natAveOtherPerSem =  500.00;    	  		//Function to set global variables  	  	function setGlobalVars(arrayOfData)  	{  		 base12CoursePrice = arrayOfData[0];      		 base34CoursePrice = arrayOfData[1];  		 nonResUnderAdd = arrayOfData[2];  	 	 credReq = arrayOfData[3];  	 	 doublePerSem  =arrayOfData[4];  	 	 singlePerSem = arrayOfData[5];  	 	 apartSinglePerSem = arrayOfData[6];  	 	 apartDoublePerSem = arrayOfData[7];  	  		 doubleSinglePerSem = arrayOfData[8];  	 	 postGradCoursePrice = arrayOfData[9];	  	 nonResGradAdd = arrayOfData[10];  		 addFeePerSem = arrayOfData[11];  		 mealPlan1 = arrayOfData[12];  		 mealPlan2 = arrayOfData[13];  		 mealPlan3 = arrayOfData[14];  		 mealPlan4 = arrayOfData[15];  		 mealPlan5 = arrayOfData[16];  		 mealPlan6 = arrayOfData[17];  		 natAveInPerSem = arrayOfData[18];  		 natAveOutPerSem = arrayOfData[19];  		 natAveOtherPerSem = arrayOfData[20];  	}		/*This function uses Regex to put the 	numbers a format that is human readable with 	commas through it.*/		function numberWithCommas(x) {    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");	}	/*Function: processForm - no parameterThis function is executed when the 'Estimate cost' button is pressed on theTuition estimator calculator.*/function processForm()  {    	//Values collected from the form.  		var studentStatus = document.getElementById('sTuition').value; 	var periodEducation = 0;  	var credPerSem = document.getElementById('creditCount').value;  	credReq = document.getElementById('creditLeft').value;  	numOfSemesters = Math.ceil(credReq/credPerSem);  	  	  	var housingType = document.getElementById('hType').value;  	var mealPlan = document.getElementById('mPlan').value  		//Error throwing from Academic Information.    if(studentStatus == 0 ||  credReq == 0)	{	 	if(studentStatus == 0 )	 	{			alert('You have to choose a student type, Resident / Non-Resident.');			return 0;		}		if(credReq == 0)		{			alert('You have to decide on a period of education or provide your credit based plan.');				return 0;		}		return 0;	}		/* These data items go into the data source		Which means eventually the system that gets these data from 		a data source are the ones that fill these data items.	*/  	  	/*  		End of the data items that are stored in data source.  	*/  	  	var totalTuition = 0.00;      //saves the total tuition for this page.  	  	  	//Identifies the students status as either resident or non-resident and calculates  	//total tuition on the basis of that.  	  	if (studentStatus==1)  	{  		totalTuition = (credReq/2.00)*base12CoursePrice + (credReq/2.00)*base34CoursePrice;  	}  	else if(studentStatus==2)  	{  		totalTuition = (credReq/2.00)*(base12CoursePrice+nonResUnderAdd) + (credReq/2.00)*(base34CoursePrice+nonResUnderAdd);  	}  	  	var campusHousingFeePerSem = 0.00;      //stores the campus housing fee per sem.  	  	  	//The following condition chain finds the campus housing fee per semester. - Version 2  	  	  	  	//The following condition chain finds the campus housing fee per semester.  	  	if(housingType==1)  	{  		campusHousingFeePerSem = singlePerSem;  	}	  	else if(housingType==2)  	{  			campusHousingFeePerSem = doublePerSem;  	}  	else if(housingType == 3)  	{  			campusHousingFeePerSem = doubleSinglePerSem;  	}  	else if(housingType==4)  	{  		campusHousingFeePerSem = apartSinglePerSem;  	}  	else if(housingType==5)  	{  		campusHousingFeePerSem = apartDoublePerSem;  	}  	else  	{  		campusHousingFeePerSem = 0.00;  	 }  	   	 //Calculates the total additional fee for the entire duration of the  	 //education. Careful about the fact that the fee is stored in the same   	 //variable that stores the per sem fee.  	   	 var addFeeTotal = addFeePerSem*numOfSemesters;  	   	 //Calculates the total campus housing fee for the entire duration of the  	 //education.  	   	 var campusHousingFeeTotal = campusHousingFeePerSem*numOfSemesters;  	   	 var mealPlanCost = 0.00;           //stores the meal plan cost for the page.  	   	//evaluates the meal plan cost on the basis of the inputs provided.   	  	 mealPlanCost = eval("mealPlan"+mealPlan)*numOfSemesters;  	   	//Calculate total tuition and total fee other than tuition. Mostly for use in the  	//comparison chart.     	var totalFee = totalTuition+campusHousingFeeTotal+mealPlanCost+addFeeTotal;  	var uafTuition = totalTuition;  	var uafFee = campusHousingFeeTotal+mealPlanCost+addFeeTotal;  	  	//Implement Comparator Value Generator  	   	 var storeNames = new Array();  	 var storeAlternateFee = new Array();  	   	   	 if (numOfSemesters == 8 || numOfSemesters == 10 || numOfSemesters == 12 || numOfSemesters == 14 || numOfSemesters == 16)  	 {  	 	for (var i =0; i<5; i++)  	 	{  	 		storeAlternateFee[i] = ((uafFee*2.00)/numOfSemesters)*(i+4);  	 	}  	 }  	 else if(credPerSem == 15)  	 {  	 	var unitFee = uafFee/numOfSemesters;  	 	var unitFactor = 0.00;  	 	var tempCredStore = new Array();  	 	tempCredStore[0] = credPerSem;  	 	tempCredStore[1] = 9.00;  	 	tempCredStore[2] = 12.00;  	 	for (var i = 0; i<3; i++)  	 	{  	 		unitFactor = credReq/tempCredStore[i];  	 		storeAlternateFee[i] = unitFee*unitFactor;  	 	}  	 }  	 else if(credPerSem == 12)  	 {  	 	var unitFee = uafFee/numOfSemesters;  	 	var unitFactor = 0.00;  	 	var tempCredStore = new Array();  	 	tempCredStore[0] = credPerSem;  	 	tempCredStore[1] = 9.00;  	 	tempCredStore[2] = 15.00;  	 	for (var i = 0; i<3; i++)  	 	{  	 		unitFactor = credReq/tempCredStore[i];  	 		storeAlternateFee[i] = unitFee*unitFactor;  	 	}  	 }  	 else if(credPerSem == 9)  	 {  	 	var unitFee = uafFee/numOfSemesters;  	 	var unitFactor = 0.00;  	 	var tempCredStore = new Array();  	 	tempCredStore[0] = credPerSem;  	 	tempCredStore[1] = 12.00;  	 	tempCredStore[2] = 15.00;  	 	for (var i = 0; i<3; i++)  	 	{  	 		unitFactor = credReq/tempCredStore[i];  	 		storeAlternateFee[i] = unitFee*unitFactor;  	 	}  	 }  	 else  	 {  	 	var tempCredStore = new Array();  	 	tempCredStore[0] = 9.00;  	 	tempCredStore[1] = 12.00;  	 	tempCredStore[2] = 15.00;  		for (var i =0; i<5; i++)  	 	{  	 		if(numOfSemesters != tempCredStore[i])  	 		{  	 			storeAlternateFee[i] = ((uafFee*2.00)/tempCredStore[i])*(i+4);  	 		}	  	 	}  	 }  	     	//Calling for the number with commas function to make numbers human readable.    	totalTuition = numberWithCommas(totalTuition.toFixed(2));  	campusHousingFeeTotal = numberWithCommas(campusHousingFeeTotal.toFixed(2));  	mealPlanCost = numberWithCommas(mealPlanCost.toFixed(2));  	totalFee = numberWithCommas(totalFee.toFixed(2));  	  	//Loading the string that becomes the result that the users of this tool can see.  	  	var htmlVal = "If you spend <b>"+Math.ceil(numOfSemesters)+" semesters</b> at UAF; you will spend:<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ <b>"+totalTuition+"</b> on tuition<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ <b>"+campusHousingFeeTotal+"</b> on campus housing<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ <b>"+mealPlanCost+"</b> on your meal plan<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ <b>"+numberWithCommas(addFeeTotal.toFixed(2))+"</b> on other fees.<br /><br />In all you would spend a total of $ <b>"+totalFee+"</b>";  	  	//Activating the result box and the chart box so that the results could be displayed.  	  	document.getElementById('resultBox').innerHTML = htmlVal;  var nationalAveTIn = natAveInPerSem*(numOfSemesters/2.0);  //Resident NatAvevar nationalAveTOut = natAveOutPerSem*(numOfSemesters/2.0);  //Non-Resident NatAvevar nationalAveT =0;  //stores the nat ave tuition for the chart.var nationalAveFee = natAveOtherPerSem*(numOfSemesters/2.0);  //the nat ave fee for the chart.//This condition chain identifies and loads nat ave tuition for the chart. 	if (studentStatus==1)  	{  		nationalAveT =nationalAveTIn;  	}  	else if(studentStatus==2)  	{		nationalAveT =nationalAveTOut;  	}   //Title for non UAF series bars. 	  	 var nonUAFSeriesName = 'National Average for '+Math.ceil(numOfSemesters/2.0)+' years'  var yourPlanName = Math.ceil(numOfSemesters/2.0)+' - year plan. (Choice)'	 var chart1;   //Stores the chart to be displayed comparing national average and UAF costs. 	  //Developing new chart System in the light of changes to the interface. 	 document.getElementById('chartBox').style.visibility = 'visible';  //find maximum fees for saving comparison.   var maxAltFee = Math.max.apply(Math, storeAlternateFee); var maxFee = Math.max(maxAltFee, uafFee);if( document.getElementById('natAve').checked == true){ 	maxFee = Math.max(maxFee, nationalAveFee);} //When national average is not requested.  if(document.getElementById('natAve').checked == false)  	{  		// 4, 5, 6, 7, 8 - Years  		// When national average is not requested.  		  	 	if(numOfSemesters == 8 || numOfSemesters == 10 || numOfSemesters == 12 || numOfSemesters == 14 || numOfSemesters == 16)  	 	{  	 		var seriesName = Math.ceil(numOfSemesters/2.0)+' - Year Plan. (Your Choice)';  	 		if(numOfSemesters == 8)  	 		{  	 			storeNames[0] = seriesName;  	 			storeNames[1] = '5-year plan';  	 			storeNames[2] = '6-year plan';  	 			storeNames[3] = '7-year plan';  	 			storeNames[4] = '8-year plan';  	 		}	  	 		else if(numOfSemesters == 10)  	 		{  	 			storeNames[0] = '4-year plan';  	 			storeNames[1] = seriesName;  	 			storeNames[2] = '6-year plan';  	 			storeNames[3] = '7-year plan';  	 			storeNames[4] = '8-year plan';	  	 		}  	 		else if(numOfSemesters == 12)  	 		{  	 			storeNames[0] = '4-year plan';  	 			storeNames[1] = '5-year plan';  	 			storeNames[2] = seriesName;  	 			storeNames[3] = '7-year plan';  	 			storeNames[4] = '8-year plan';  	 		}  	 		else if(numOfSemesters == 14)  	 		{  	 			storeNames[0] = '4-year plan';  	 			storeNames[1] = '5-year plan';  	 			storeNames[2] = '6-year plan';  	 			storeNames[3] = seriesName;  	 			storeNames[4] = '8-year plan';  	 		}  	 		else if(numOfSemesters == 16)  	 		{  	 			storeNames[0] = '4-year plan';  	 			storeNames[1] = '5-year plan';  	 			storeNames[2] = '6-year plan';  	 			storeNames[3] = '7-year plan';  	 			storeNames[4] = seriesName;  	 		}  	 		  	 		//Calculating chain saving  	 		var savingVals = new Array();  	 		var sLoop = 0;  	 		for(sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		}  	 		$(document).ready(function () {		     	chart1 = new Highcharts.Chart({         		chart: {          				   renderTo: 'chartBox',			               type: 'bar'         			   },						title: {			                  text: 'Cost Comparison'          			   },	            xAxis: {    		              categories: [storeNames[0], storeNames[1], storeNames[2], storeNames[3], storeNames[4]]            		   },               yAxis: {             		   title: {                    			text: 'Cost (in dollars)'                			  },                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	  	  				             		  },              legend: {               			 backgroundColor: '#FFFFFF'         		      },              plotOptions: {                		bar: {                    			stacking: 'normal',                    		    dataLabels: {                            					enabled: true,                            					format: "$ {point.y:,.0f}",                            					color: '#FFF000'                            	    		}                      		 }            				},              series: [{                			name: 'Tuition',	                    	data: [Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]             		   },            		   {		                	name: 'Other Cost',	        		        data: [Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2]), Math.ceil(storeAlternateFee[3]), Math.ceil(storeAlternateFee[4])]            		   },            		   {            	name: 'Save',            	data: [Math.ceil(savingVals[0]), Math.ceil(savingVals[1]), Math.ceil(savingVals[2]), Math.ceil(savingVals[3]), Math.ceil(savingVals[4])]            }]    			}); //CLOSING: Highcharts.Chart 			}); //CLOSING: Ready Function  	 } // CLOSING: 4, 5, 6, 7, 8 - Years  	   // When national average is not requested.    	// 15 Credits  	// When national average is not requested.    	else if(credPerSem == 15)  	 	{ 			//Calculating chain saving  	 		var savingVals = new Array();  	 		var sLoop = 0;  	 		for(sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		} 	 	  	 		$(document).ready(function () {     		 chart1 = new Highcharts.Chart({         	 chart: {             renderTo: 'chartBox',             type: 'bar'         			},							 title: {                		text: 'Cost Comparison'           	 		},             xAxis: {	                	categories: [yourPlanName, '9 cred/sem Plan', '12 cred/sem Plan']            		},            yAxis: {                           	title: {                    			text: 'Cost (in dollars)'                		   },                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	              	   },            legend: {                		backgroundColor: '#FFFFFF'            		},            plotOptions: {                		bar: {	                    stacking: 'normal',    	                dataLabels: {        	                    enabled: true,        	                    format: "$ {point.y:,.0f}",                	            color:'#FFF000'                            		}                        	}            			},            series: [{                name: 'Tuition',                data: [Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]            },             {                name: 'Other Cost',                data: [Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2])]            },            {            	name: 'Save',            	data: [Math.ceil(savingVals[0]), Math.ceil(savingVals[1]), Math.ceil(savingVals[2])]            }            ]	     }); //CLOSING: Highcharts.Chart 	}); //CLOSING: Ready Function  } // CLOSING: 15 Credits    // When national average is not requested.	        // 12 Credits  	// When national average is not requested.  	  	else if(credPerSem == 12)  	 	{  	 		//Calculating chain saving  	 		var savingVals = new Array();  	 		var sLoop = 0;  	 		for(sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		}   	 		  	 		$(document).ready(function () {     		 chart1 = new Highcharts.Chart({         	 chart: {             renderTo: 'chartBox',             type: 'bar'         		},							title: {		                text: 'Cost Comparison'    	           },            xAxis: {           	        categories: [yourPlanName, '9 cred/sem Plan', '15 cred/sem Plan']            	   },            yAxis: {                	title: {                    	text: 'Cost (in dollars)'                		   },                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	              	   },            legend: {                backgroundColor: '#FFFFFF'            		},            plotOptions: {                	bar: {                    		stacking: 'normal',                            dataLabels: {                                			enabled: true,                                			format: "$ {point.y:,.0f}",		                                	color:'#FFF000'        		                        }                         }            },            series: [{                		name: 'Tuition',		                data: [Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]            },             {             		   name: 'Other Cost',                	   data: [Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2])]            		},            		{            		   		name: 'Save',            		   		data: [Math.ceil(savingVals[0]), Math.ceil(savingVals[1]), Math.ceil(savingVals[2])]            		   }]     		}); //CLOSING: Highcharts.Chart 		}); //CLOSING: Ready Function  	} // CLOSING: 12 Credits      // When national average is not requested.  // 9 Credits  // When national average is not requested.        else if(credPerSem == 9)  	 	{  	 		//Calculating chain saving  	 		var savingVals = new Array();  	 		var sLoop = 0;  	 		for(sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		}   	 		  	 		$(document).ready(function () {    		    chart1 = new Highcharts.Chart({         		chart: {             		renderTo: 'chartBox',	                type: 'bar'       				   },							title: {                text: 'Cost Comparison'            	   },            xAxis: {                		categories: [yourPlanName, '12 cred/sem Plan', '15 cred/sem Plan']            	   },            yAxis: {                           		title: {		                    		text: 'Cost (in dollars)'                			   },                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	           		   },                        legend: {                	backgroundColor: '#FFFFFF',                	reversed: true            		},            plotOptions: {	                	bar: {                    		stacking: 'normal',                            dataLabels: {                                		enabled: true,                                		format: "$ {point.y:,.0f}", 		                               	color:'#FFF000'                            			}                        	}            			},            series: [{                		name: 'Tuition',                		data: [Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]            		  },       			      {                		name: 'Other Cost',		                data: [Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2])]        		    },        		    {            		   		name: 'Save',            		   		data: [Math.ceil(savingVals[0]), Math.ceil(savingVals[1]), Math.ceil(savingVals[2])]            		   }]     		});  //CLOSING: Highcharts.Chart 		});	//CLOSING: Ready Function	  	} 	// CLOSING: 9 Credits      	// When national average is not requested. 	 	      	     // Other Credits     // When national average is not requested. 	       	 else  	 	{  	 		//Calculating chain saving  	 		var savingVals = new Array();  	 		var sLoop = 0;  	 		for(sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		}   	 		  	 		$(document).ready(function () {     			chart1 = new Highcharts.Chart({         		chart: {             			renderTo: 'chartBox',		                type: 'bar'         			   },								title: {		                   	text: 'Cost Comparison'       			       },            	xAxis: {                	   	categories: [yourPlanName, '9 cred/sem Plan', '12 cred/sem Plan', '15 cred/sem Plan']		               },           		yAxis: {		                title: {        			            text: 'Cost (in dollars)'                			   },                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	              		   },	            legend: {       		            backgroundColor: '#FFFFFF'            			},	            plotOptions: {    			            bar: {                		    stacking: 'normal',                            dataLabels: {		                                enabled: true,		                                format: "$ {point.y:,.0f}",        	                        	color:'#FFF000'            		                    }                    	        }            				},        series: [{        	        name: 'Tuition',            	    data: [Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]            	},             	{	                name: 'Other Cost',                	data: [Math.ceil(uafFee), Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2])]            	},            	{            		   		name: 'Save',            		   		data: [Math.ceil(storeAlternateFee[0]-uafFee), Math.ceil(savingVals[0]), Math.ceil(savingVals[0]), Math.ceil(savingVals[0])]            		   }]     		}); //CLOSING: Highcharts.Chart		 });//CLOSING: Ready Function  	 }	// CLOSING: Other Credits      	// When national average is not requested.      	 } //CLOSING: When national average is not requested. //When national average is requested. else if(document.getElementById('natAve').checked == true){		// 4, 5, 6, 7, 8 - Years  		// When national average is requested.		if(numOfSemesters == 8 || numOfSemesters == 10 || numOfSemesters == 12 || numOfSemesters == 14 || numOfSemesters == 16)  	 	{  	 	  	 		var seriesName = Math.ceil(numOfSemesters/2.0)+' - Year Plan. (Your Choice)';  	 		var storeNames = new Array();  	 		if(numOfSemesters == 8)  	 		{  	 			storeNames[0] = seriesName;  	 			storeNames[1] = '5-Year Plan';  	 			storeNames[2] = '6-Year Plan';  	 			storeNames[3] = '7-Year Plan';  	 			storeNames[4] = '8-Year Plan';  	 		}	  	 		else if(numOfSemesters == 10)  	 		{  	 			storeNames[0] = '4-Year Plan';  	 			storeNames[1] = seriesName;  	 			storeNames[2] = '6-Year Plan';  	 			storeNames[3] = '7-Year Plan';  	 			storeNames[4] = '8-Year Plan';  	 		}  	 		else if(numOfSemesters == 12)  	 		{  	 			storeNames[0] = '4-Year Plan';  	 			storeNames[1] = '5-Year Plan';  	 			storeNames[2] = seriesName;  	 			storeNames[3] = '7-Year Plan';  	 			storeNames[4] = '8-Year Plan';  	 		}  	 		else if(numOfSemesters == 14)  	 		{  	 			storeNames[0] = '4-Year Plan';  	 			storeNames[1] = '5-Year Plan';  	 			storeNames[2] = '6-Year Plan';  	 			storeNames[3] = seriesName;  	 			storeNames[4] = '8-Year Plan';  	 		}  	 		else if(numOfSemesters == 16)  	 		{  	 			storeNames[0] = '4-Year Plan';  	 			storeNames[1] = '5-Year Plan';  	 			storeNames[2] = '6-Year Plan';  	 			storeNames[3] = '7-Year Plan';  	 			storeNames[4] = seriesName;  	 		}  	 		var savingVals = new Array();			for(var sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		}			  	 		$(document).ready(function () {     			chart1 = new Highcharts.Chart({         			chart: {             			renderTo: 'chartBox',		                type: 'bar'         				    },									title: {					                text: 'Cost Comparison'           				   },		            xAxis: {        			        categories: [nonUAFSeriesName, '4-Year Plan', '5-Year Plan', '6-Year Plan', '7-Year Plan', '8-Year Plan']            			   },		            yAxis: {			                title: {            				        text: 'Cost (in dollars)'                				   },                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	              			   },          	                legend: {        				        backgroundColor: '#FFFFFF'            				},		            plotOptions: {        			        bar: {                    		stacking: 'normal',                            	dataLabels: {                                	enabled: true,                                	format: "$ {point.y:,.0f}",                                	color: '#FFF000'                            	}                        	}            			},                series: [{		                name: 'Tuition',        		        data: [Math.ceil(nationalAveT), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]             			 },             			 {		                name: 'Other Cost',        		        data: [Math.ceil(nationalAveFee), Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2]), Math.ceil(storeAlternateFee[3]), Math.ceil(storeAlternateFee[4])]            			 },            		   {            		   		name: 'Save',            		   		data: [Math.ceil(nationalAveFee-storeAlternateFee[0]), Math.ceil(savingVals[0]), Math.ceil(savingVals[1]), Math.ceil(savingVals[2]), Math.ceil(savingVals[3]), Math.ceil(savingVals[4])]            		   }]     				}); //CLOSING: Highcharts.Chart 				}); //CLOSING: Ready Function  	 } // CLOSING: 4, 5, 6, 7, 8 - Years      // When national average is not requested.           // 15 Credits     //When national average is requested.         	 else if(credPerSem == 15)  	 	{			var savingVals = new Array();			for(var sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		}	  	 		$(document).ready(function () {    					 chart1 = new Highcharts.Chart({			         		chart: {            			    renderTo: 'chartBox',			                type: 'bar'						           },										title: {			                text: 'Cost Comparison'            					},			            xAxis: {                			categories: ['National Average '+yourPlanName, yourPlanName, '9 cred/sem Plan', '12 cred/sem Plan']            				   },			            yAxis: {			                title: {                				    text: 'Cost (in dollars)'				                   },                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	              					},            			            legend: {            				    backgroundColor: '#FFFFFF'					            },			            plotOptions: {            					    bar: {				                    stacking: 'normal',                		            dataLabels: {                        				        enabled: true,                        				        format: "$ {point.y:,.0f}",			                                	color:'#FFF000'            					                }                        				 }							          },            series: [{            		    name: 'Tuition',		                data: [Math.ceil(nationalAveT), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]        		     },         			{            		    name: 'Other Cost',		                data: [Math.ceil(nationalAveFee), Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2])]		            },            		   {            		   		name: 'Save',            		   		data: [Math.ceil(nationalAveFee-storeAlternateFee[0]), Math.ceil(savingVals[0]), Math.ceil(savingVals[1]), Math.ceil(savingVals[2])]            		   }]     			}); //CLOSING: Highcharts.Chart		 }); //CLOSING: Ready Function  	} 	// CLOSING: 15 Credits       // When national average is not requested.           // 12 Credits    //When national average is requested.          	else if(credPerSem == 12)  	 	{			var savingVals = new Array();		for(var sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		}  	 			$(document).ready(function () {     							chart1 = new Highcharts.Chart({         						chart: {             							renderTo: 'chartBox',             							type: 'bar'         								},												title: {						                text: 'Cost Comparison'							            },					            xAxis: {						                categories: ['National Average '+yourPlanName, yourPlanName, '9 cred/sem Plan', '15 cred/sem Plan']							            },					            yAxis: {						                title: {							                    text: 'Cost (in dollars)'                							   },                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	  							            },            					            legend: {						                backgroundColor: '#FFFFFF'							            },					            plotOptions: {						                bar: {					                    stacking: 'normal',                    			        dataLabels: {                                					enabled: true,                                					format: "$ {point.y:,.0f}",				                                	color:'#FFF000'                					                }	                				        }								            },            		series: [{				                name: 'Tuition',                				data: [Math.ceil(nationalAveT), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]				            }, 							{ 				               name: 'Other Cost',                			   data: [Math.ceil(nationalAveFee), Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2])]				            },            		   {            		   		name: 'Save',            		   		data: [Math.ceil(nationalAveFee-storeAlternateFee[0]), Math.ceil(savingVals[0]), Math.ceil(savingVals[1]), Math.ceil(savingVals[2])]            		   }]					     }); //CLOSING: Highcharts.Chart				 }); //CLOSING: Ready Function  	} // CLOSING: 12 Credits      // When national average is not requested.        // 9 Credits    //When national average is requested.        	else if(credPerSem == 9)  	 	{var savingVals = new Array();			for(var sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		}  	 		$(document).ready(function () {     chart1 = new Highcharts.Chart({         			chart: {             				renderTo: 'chartBox',             				type: 'bar'         					},									title: {			                text: 'Cost Comparison'            				},		            xAxis: {         			       categories: ['National Average '+yourPlanName, yourPlanName, '12 cred/sem Plan', '15 cred/sem Plan']				            },		            yAxis: {			                title: {            				        text: 'Cost (in dollars)'                					},                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	  				            },	               legend: {       					         backgroundColor: '#FFFFFF'            			   },		            plotOptions: {        			        bar: {                    				stacking: 'normal',		                            dataLabels: {				        	                        enabled: true,				        	                        format: "$ {point.y:,.0f}",                				                	color:'#FFF000'                                				}                            	 }					             },            series: [{            		    name: 'Tuition',		                data: [Math.ceil(nationalAveT), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]        		     },         		     {		                name: 'Other Cost',        		        data: [Math.ceil(nationalAveFee), Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2])]            		 },            		   {            		   		name: 'Save',            		   		data: [Math.ceil(nationalAveFee-storeAlternateFee[0]), Math.ceil(savingVals[0]), Math.ceil(savingVals[1]), Math.ceil(savingVals[2])]            		   }]     			}); //CLOSING: Highcharts.Chart 			}); //CLOSING: Ready Function  	} // CLOSING: 9 Credits      // When national average is not requested.  	 	  	 	  	 	// Other Credits	    //When national average is requested.  	 			else		{	var savingVals = new Array();			for(var sLoop =0; sLoop<(storeAlternateFee.length)-1; sLoop++)  	 		{  	 			savingVals[sLoop] = storeAlternateFee[sLoop+1]-storeAlternateFee[sLoop];  	 			if(savingVals[sLoop]<0)  	 			{  	 				savingVals[sLoop]=0;	  	 			}  	 		}						$(document).ready(function () {				     chart1 = new Highcharts.Chart({         			 chart: {				             renderTo: 'chartBox',			                 type: 'bar'				             },									title: {			                text: 'Cost Comparison'            				},		            xAxis: {        			        categories: ['National Average '+yourPlanName, yourPlanName, '9 cred/sem Plan', '12 cred/sem Plan', '15 cred/sem Plan']				            },		            yAxis: {			                title: {            				        text: 'Cost (in dollars)'					                },                		stackLabels: {                			color: 'black',                			format: "Total: $ {total:,.0f} ",// Save $ {$savingVals[1]: ,.0f}",                			enabled: true                			                		}	  			              },            		legend: {                			backgroundColor: '#FFFFFF'				            },	                plotOptions: {        			        bar: {                    				stacking: 'normal',		                            dataLabels: {        				                        enabled: true,        				                        format: "$ {point.y:,.0f}",			                                	color: '#FFF000'            				                    }                            	}            				},            series: [{                		name: 'Tuition',		                data: [Math.ceil(nationalAveT), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition), Math.ceil(uafTuition)]        		     },         			{            		    name: 'Other Cost',		                data: [Math.ceil(nationalAveFee), Math.ceil(uafFee), Math.ceil(storeAlternateFee[0]), Math.ceil(storeAlternateFee[1]), Math.ceil(storeAlternateFee[2])]		            },            		   {            		   		name: 'Save',            		   		data: [Math.ceil(nationalAveFee-uafFee), Math.ceil(uafFee-storeAlternateFee[0]), Math.ceil(savingVals[0]), Math.ceil(savingVals[1]), Math.ceil(savingVals[2])]            		   }]			     }); //CLOSING: Highcharts.Chart			 }); //CLOSING: Ready Function	} // CLOSING: Other Credits 	  // When national average is not requested.	}// CLOSING: When national average is requested.}// CLOSING: function processForm()